generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Course {
  BTECH
}

enum Branch {
  CSE
  CSE_AI
}

enum Year {
  YEAR_1
  YEAR_2
  YEAR_3
  YEAR_4
}

enum Role {
  STUDENT
  TEACHER
}

enum SubjectCode {
  CS_701
  CS_702
  CS_703
  AS_702
  CS_751
  CS_752
  CS_753
  CS_754
  CS_7044
}

model Teacher {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  password    String
  subjectCode SubjectCode  @default(CS_701)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        Role         @default(TEACHER)
  assignments Assignment[]
}

model Student {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        Role         @default(STUDENT)
  course      Course       @default(BTECH)
  year        Year         @default(YEAR_4)
  branch      Branch       @default(CSE)
  assignments Assignment[] @relation("AssignmentToStudent")
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  problems    Problem[]
  course      Course    @default(BTECH)
  year        Year      @default(YEAR_4)
  branch      Branch    @default(CSE)
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String
  students    Student[] @relation("AssignmentToStudent")
}

model Problem {
  id           String            @id @default(cuid())
  title        String
  description  String
  starterCode  String
  examples     Example[]
  testCases    TestCase[]
  difficulty   ProblemDifficulty @default(EASY)
  assignment   Assignment        @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model Example {
  id          String   @id @default(cuid())
  input       String
  output      String
  explanation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  problem     Problem  @relation(fields: [problemId], references: [id])
  problemId   String
}

model TestCase {
  id             String   @id @default(cuid())
  input          String
  expectedOutput String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  problem        Problem  @relation(fields: [problemId], references: [id])
  problemId      String
}
